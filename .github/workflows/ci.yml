# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 5,14 * * *'

jobs:
  does-it-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal

  playwright-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs:
      - does-it-build
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Verify docker is installed
      id: docker-version
      continue-on-error: true
      run: docker --version

    - name: Verify docker-compose is installed
      id: docker-compose-version
      continue-on-error: true
      run: docker compose --version

    - name: Install docker / docker-compose
      if: steps.docker-version.outcome == 'failure' || steps.docker-compose-version.outcome == 'failure'
      run: |
          sudo apt-get update
          sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install docker-ce docker-compose-plugin

    - name: Start Docker
      run: |
          sudo service docker start
          sudo docker ps
          touch results.json

    - name: Start service db
      run: docker compose -f docker-compose.yml up -d db

    - name: Wait for postgres container to be ready
      timeout-minutes: 1
      id: wait-postgres
      continue-on-error: true
      run: |
          while ! docker exec webstore-backend-db-1 pg_isready; do
              sleep 1
          done

    - name: Build service "ci"
      id: push
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: false
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Start service "ci"
      run: docker compose -f docker-compose.yml up -d ci

    - name: Wait until webserver is ready
      id: wait-webserver
      continue-on-error: true
      run: |
        # only wait for 5 seconds. The image generation should not block the webserver as the generated images are optional
        timeout=5000
        start=$(date +%s%3N)
        while ! curl -s http://localhost:8080/healthz; do
            sleep 1
            now=$(date +%s%3N)
            if [ $((now-start)) -gt $timeout ]; then
                exit 1
            fi
        done

    - name: Run Playwright tests from commanderred42/webstore-playwright
      id: playwright
      continue-on-error: true
      if: steps.wait-postgres.outcome == 'success' && steps.wait-webserver.outcome == 'success'
      run: docker compose -f docker-compose.yml run playwright

    - uses: daun/playwright-report-summary@v3
      if: ${{ !cancelled() && steps.wait-postgres.outcome == 'success' && steps.wait-webserver.outcome == 'success' }}
      with:
        report-file: results.json

    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() && steps.wait-postgres.outcome == 'success' && steps.wait-webserver.outcome == 'success' }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - name: Export webserver logs if it failed to start
      if: steps.wait-webserver.outcome == 'failure' || steps.playwright.outcome == 'failure'
      run: docker compose -f docker-compose.yml logs ci &> ci.log

    - name: Upload webserver logs if it exists
      if: steps.wait-webserver.outcome == 'failure' || steps.playwright.outcome == 'failure'
      uses: actions/upload-artifact@v4
      with:
        path: ci.log
        name: ci.log

    - name: Export playwright logs if it failed to start
      if: steps.playwright.outcome == 'failure'
      run: docker compose -f docker-compose.yml logs playwright &> playwright.log

    - name: Upload playwright logs if it exists
      if: steps.playwright.outcome == 'failure'
      uses: actions/upload-artifact@v4
      with:
        path: playwright.log
        name: playwright.log

    - name: Mark as failed if the webserver failed to start
      if: steps.wait-webserver.outcome == 'failure' || steps.wait-postgres.outcome == 'failure' || steps.playwright.outcome == 'failure'
      run: exit 1


  push_to_registry:
    name: Push Docker image to Docker Hub
    needs:
      - does-it-build
      - playwright-tests
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          flavor: |
            latest=true
          images: commanderred42/webstore-backend

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
